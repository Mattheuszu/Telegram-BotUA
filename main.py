import telebot
import requests
import webbrowser
from telebot import types
import os
import sqlite3
import json
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
from alerts_in_ua import AsyncClient as AsyncAlertsClient
import asyncio
from apscheduler.schedulers.background import BackgroundScheduler

name = None

bot = telebot.TeleBot('')
weather_api_key = ''
alerts_api_key = ''
alerts_client = AsyncAlertsClient(token=alerts_api_key)

group_chat_id = 

users = []
alerts_cache = {}

shelter_links = {
    1: ('–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://vajr.info/2023/10/21/karta-skhema-ukryttiv-na-vinnychchyni-iak-hromady-porushuiut-prava-zhurnalistiv-ok/'),
    2: ('–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://rayon.in.ua/news/485969-zakhisni-sporudi-interaktivna-karta-roztashuvannya-skhovishch-na-volini'),
    3: ('–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://vchasnoua.com/news/spysok-bomboskhovyshch-donechchyny-de-ukrytysia-u-razi-boiovykh-dii'),
    4: ('–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://vchasnoua.com/news/spysok-bomboskhovyshch-donechchyny-de-ukrytysia-u-razi-boiovykh-dii'),
    5: ('–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://www.google.com/maps/d/u/0/viewer?mid=1CFml6yHssn83O7b_ap6djwJGv7HBrsw&ll=50.259716636255746%2C28.677647237622075&z=13'),
    6: ('–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://carpathia.gov.ua/news/karta-ukrittiv-ta-zahisnih-sporud-zakarpattya'),
    7: ('–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://ukryttya.zp.gov.ua/'),
    8: ('–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://www.mvk.if.ua/news/57379'),
    9: ('–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://koda.gov.ua/czyvilnyj-front/zahysni-sporudy-tochky-obigrivu/ukryttya/'),
    10: ('–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://dmitrovka-otg.gov.ua/useful-info/interaktivna-karta-zahisnih-sporud'),
    11: ('–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://www.google.com/maps/d/u/0/viewer?mid=1j_f6ytqZ9kO67Y0cOjgDfqIPmag&ll=49.70192885437554%2C39.3944645435631&z=9&fbclid=IwAR1mOR3_z_MuRfUePxOG_THQSr36GSOIoUmS2tvcpGAPbv3QxZPiJ3fWun8'),
    12: ('–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://map.city-adm.lviv.ua/map/main#map=11//49.79121931758962//24.034309387207035&&layer=9635585433681688-1,100//2765617480184367031-1,100'),
    13: ('–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://mkrada.gov.ua/shelters/'),
    14: ('–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://omr.gov.ua/ua/citizens/map-shelter/'),
    15: ('–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://www.google.com/maps/d/u/0/viewer?mid=10wBVAAKCTHdPXYODiUbhjTTrJoY&amp%3Bll=49.60204310930155%2C34.54944381904308&amp%3Bz=12&ll=49.53703680908182%2C34.56731333192668&z=11'),
    16: ('–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://7dniv.rv.ua/holovni-novyny/karta-zakhysnykh-sporud-rivnenshchyny/'),
    17: ('–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://www.google.com/maps/d/u/0/viewer?mid=12U9NWrsOmGKyf6zGQvdY2br4USc7OeFx&hl=ru&ll=50.90906912283643%2C34.79703595&z=13'),
    18: ('–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://giscid.maps.arcgis.com/apps/webappviewer/index.html?id=07691e5aec27459bb282268818419d46&fbclid=IwAR1x_ZVZeNThMuxmnbIOykJdpkxs2Pjuv5Vaz2IclluHusgDh_Bfj4GUxD0'),
    19: ('–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://www.google.com/maps/d/u/0/viewer?mid=16g3PB0LSZYAsrrAuiXZuxEBVaN0&femb=1&ll=49.643443078822585%2C38.326274299999994&z=7'),
    20: ('–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://www.google.com/maps/d/u/0/viewer?mid=20'),
    21: ('–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://www.google.com/maps/d/u/0/viewer?mid=15NSLcOIYzWeSf46DD_Sd8iJJcKM&ll=49.391498589515%2C26.990056440362657&z=11'),
    22: ('–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://ck-oda.gov.ua/perelik-zaxisnix-sporud-cherkaskoyi-oblasti/'),
    23: ('–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://bukoda.gov.ua/gromadyanam/interaktivna-karta-zahisnih-sporud-civilnogo-zahistu'),
    24: ('–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å', 'https://www.google.com/maps/d/u/0/viewer?hl=ru&mid=1VJ4yH6VbKhqRP6Z1W3DB7vKhpXM&ll=51.52010647927098%2C31.276094464404316&z=13'),
    25: ('–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º', 'https://www.google.com/maps/d/u/0/viewer?mid=25'),
    26: ('–º. –ö–∏—ó–≤', 'https://texty.org.ua/fragments/105181/kyyiv-de-roztashovane-najblyzhche-do-vas-ukryttya-interaktyvna-karta/'),
    27: ('–º. –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å', 'https://www.google.com/url?sa=i&url=https%3A%2F%2Fternopilcity.gov.ua%2Fnews%2F56976.html&psig=AOvVaw3LPRlWLJlw7--HcmSpE-cz&ust=1717511979690000&source=images&cd=vfe&opi=89978449&ved=0CBIQjRxqFwoTCLjJ__XUv4YDFQAAAAAdAAAAABAJ')
}

regions = {
    1: '–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    2: '–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    3: '–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    4: '–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    5: '–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    6: '–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    7: '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    8: '–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    9: '–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    10: '–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    11: '–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    12: '–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    13: '–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    14: '–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    15: '–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    16: '–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    17: '–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    18: '–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    19: '–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    20: '–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    21: '–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    22: '–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    23: '–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    24: '–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
    25: '–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º',
    26: '–º. –ö–∏—ó–≤',
    27: '–º. –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å'
}

@bot.message_handler(commands=['start'])
def main(message):
    user = {'chat_id': message.chat.id, 'name': message.from_user.first_name}
    if user not in users:
        users.append(user)
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! –Ø –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏–º—É —Ç–µ–±–µ –ø—Ä–æ —Ä–∞–∫–µ—Ç–Ω—É –∑–∞–≥—Ä–æ–∑—É —ñ –Ω–∞–π–±–ª–∏–∂—á—ñ —Å—Ö–æ–≤–∏—â–∞.')


scheduler = BackgroundScheduler()
def start_checking_rocket_threat(chat_id):
    scheduler.add_job(check_rocket_threats, 'interval', minutes=1, args=[chat_id])
    scheduler.start()

async def check_rocket_threats(chat_id):
    active_alerts = await alerts_client.get_active_alerts()
    alerts = active_alerts.get_all_alerts()
    rocket_threats = [alert for alert in alerts if '—Ä–∞–∫–µ—Ç–Ω–∞' in alert.location_title.lower()]

    if rocket_threats:
        bot.send_message(chat_id, "üöÄ –£–í–ê–ì–ê! –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∞ —Ä–∞–∫–µ—Ç–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞!")
        scheduler.remove_all_jobs()  

@bot.message_handler(commands=['rocket_threat'])
def rocket_threat(message):
    bot.send_message(message.chat.id, "üßÆ –°—Ç–µ–∂–∏–º–æ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–∞–∫–µ—Ç–Ω—É –∑–∞–≥—Ä–æ–∑—É.")
    start_checking_rocket_threat(message.chat.id)

@bot.message_handler(commands=['check_alerts'])
def check_alerts(message):
    asyncio.run(send_alerts_info(message.chat.id))

@bot.message_handler(commands=['site', 'website'])
def site(message):
    webbrowser.open('https://tsn.ua/tags/%D1%80%D0%B0%D0%BA%D0%B5%D1%82%D0%BD%D0%B8%D0%B9%20%D1%83%D0%B4%D0%B0%D1%80')

@bot.message_handler(commands=['shelters'])
def send_shelter_links(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(region_name, callback_data=f'shelter_{uid}') for uid, (region_name, link) in shelter_links.items()]
    markup.add(*buttons)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –æ–±–ª–∞—Å—Ç—å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('shelter_'))
def shelter_callback(call):
    uid = int(call.data.split('_')[1])
    region_name, link = shelter_links[uid]
    bot.send_message(call.message.chat.id, f'–û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –±–æ–º–±–æ—Å—Ö–æ–≤–∏—â–∞ —É {region_name}: {link}')

@bot.message_handler(commands=['account'])
def start_account(message):
    conn = sqlite3.connect('botpython.sql')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, pass TEXT)')
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ñ—Ç! –ó–∞—Ä–∞–∑ —Ç–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ! –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è.')
    bot.register_next_step_handler(message, user_name)

def user_name(message):
    global name
    name = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å')
    bot.register_next_step_handler(message, user_pass)

def user_pass(message):
    password = message.text.strip()

    conn = sqlite3.connect('botpython.sql')
    cur = conn.cursor()

    cur.execute("INSERT INTO users (name, pass) VALUES (?, ?)", (name, password))
    conn.commit()
    cur.close()
    conn.close()

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤', callback_data='users'))
    bot.send_message(message.chat.id, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–πüë§', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'users')
def callback(call):
    conn = sqlite3.connect('botpython.sql')
    cur = conn.cursor()

    cur.execute('SELECT * FROM users')
    users_data = cur.fetchall()

    info = ''
    for user in users_data:
        info += f'–Ü–º\'—è: {user[1]}, –ø–∞—Ä–æ–ª—å: {user[2]}\n'

    cur.close()
    conn.close()

    bot.send_message(call.message.chat.id, info)

@bot.message_handler(commands=['donate'])
def donate(message):
    bot.send_message(message.chat.id,
                     'üíôüíõ –ü—Ä–∏–≤—ñ—Ç, –±—É–ª–æ –± –¥—É–∂–µ –∑–¥–æ—Ä–æ–≤–æ —è–∫—â–æ –± —Ç–∏ –∑–∞–¥–æ–Ω–∞—Ç–∏–≤ –¥–ª—è –Ω–∞—à–∏—Ö —Ö–ª–æ–ø—Ü—ñ–≤ –∑ 3-–û–®–ë —è–∫—ñ –∑–∞—Ö–∏—â–∞—é—Ç—å –Ω–∞—à—É –¥–µ—Ä–∂–∞–≤—É')

    file_path = '3–û–®–ë.jpg'
    if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
        with open(file_path, 'rb') as file:
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url='https://ab3.army/pro-brigadu/')
            button2 = types.InlineKeyboardButton('–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏', url='https://supportazov.com/')
            markup.add(button1, button2)

            bot.send_photo(message.chat.id, file, reply_markup=markup)

@bot.message_handler(commands=['support'])
def support(message):
    bot.send_message(message.chat.id,
                     'üíôüíõ –ü—Ä–∏–≤—ñ—Ç, –±—É–ª–æ –± –¥—É–∂–µ –∑–¥–æ—Ä–æ–≤–æ —è–∫—â–æ –± —Ç–∏ –∑–∞–¥–æ–Ω–∞—Ç–∏–≤ –Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–ª—è –º–æ–µ—ó —Ä—ñ–¥–Ω–æ—ó –∫—Ä–∞—ó–Ω–∏')

    file_path = 'ukraine.jpg'
    if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
        with open(file_path, 'rb') as file:
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url='https://www.pravda.com.ua/')
            button2 = types.InlineKeyboardButton('–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç–∏', url='https://moveukraine.org/uk/donation/?gad_source=1&gclid=Cj0KCQjw3tCyBhDBARIsAEY0XNkK538FB7LW5I07ksWS–óc8LizdxdHlhLOvr6hsDROdY3THjIJRY8CMaAkt-EALw_wcB')
            markup.add(button1, button2)

            bot.send_photo(message.chat.id, file, reply_markup=markup)

@bot.message_handler(commands=['help'])
def help(message):
    safety_tips = (
        "üì¢ –¢–µ—Ö–Ω—ñ–∫–∞ –±–µ–∑–ø–µ–∫–∏ –ø—ñ–¥ —á–∞—Å —Ä–∞–∫–µ—Ç–Ω–æ—ó –∑–∞–≥—Ä–æ–∑–∏:\n"
        "1. –ó–∞–ª–∏—à–∞–π—Ç–µ—Å—å —É –±–µ–∑–ø–µ—á–Ω–æ–º—É –º—ñ—Å—Ü—ñ, –ø–æ–¥–∞–ª—ñ –≤—ñ–¥ –≤—ñ–∫–æ–Ω.\n"
        "2. –Ø–∫—â–æ —á—É—î—Ç–µ —Å–∏—Ä–µ–Ω—É –∞–±–æ –≤–∏–±—É—Ö–∏, –Ω–µ–≥–∞–π–Ω–æ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ —É–∫—Ä–∏—Ç—Ç—è.\n"
        "3. –ó–∞–≤–∂–¥–∏ –º–∞–π—Ç–µ –ø—Ä–∏ —Å–æ–±—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ —Ç–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ä–µ—á—ñ.\n"
        "4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–∞—Å–æ–±–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ö–∏—Å—Ç—É, —è–∫—â–æ –≤–æ–Ω–∏ —î.\n"
        "5. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏.\n"
        "6. –£–Ω–∏–∫–∞–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª—ñ—Ñ—Ç—ñ–≤ –ø—ñ–¥ —á–∞—Å –∑–∞–≥—Ä–æ–∑–∏.\n"
        "7. –ó–∞–ª–∏—à–∞–π—Ç–µ—Å—è –Ω–∞ –∑–≤'—è–∑–∫—É –∑ –±–ª–∏–∑—å–∫–∏–º–∏ —Ç–∞ —Ä—ñ–¥–Ω–∏–º–∏.\n"
    )
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤—ñ—Ç! –Ø–∫—â–æ —Ç–æ–±—ñ –∑–Ω–∞–¥–æ–±–∏–ª–∞—Å—è –¥–æ–ø–æ–º–æ–≥–∞, –æ—Å—å –¥–æ–≤—ñ–¥–∫–∞:\n'
                     '/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n'
                     '/help - –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ—Ö–Ω—ñ–∫—É –±–µ–∑–ø–µ–∫–∏\n'
                     '/site - –í—ñ–¥–∫—Ä–∏—Ç–∏ —Å–∞–π—Ç –Ω–æ–≤–∏–Ω\n'
                     '/weather - –î—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É\n'
                     '/shelters - –î—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ —É–∫—Ä–∏—Ç—Ç—è –≤ –≤–∞—à—ñ–π –æ–±–ª–∞—Å—Ç—ñ\n'
                     '/rocket_threat - –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–∞–∫–µ—Ç–Ω—É –∑–∞–≥—Ä–æ–∑—É\n'
                     f'{safety_tips}')

@bot.message_handler(commands=['weather'])
def weather(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ñ—Ç! üèô –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞ üèô')

admin_password = ""

@bot.message_handler(commands=['send_to_group'])
def request_group_message(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    bot.register_next_step_handler(message, verify_admin_password)

def verify_admin_password(message):
    if message.text.strip() == admin_password:
        bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –≤—ñ—Ä–Ω–∏–π. –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø—É:')
        bot.register_next_step_handler(message, send_group_message)
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.')

def send_group_message(message):
    if message.content_type == 'text':
        bot.send_message(group_chat_id, message.text)
    elif message.content_type == 'photo':
        bot.send_photo(group_chat_id, message.photo[-1].file_id, caption=message.caption)
    elif message.content_type == 'video':
        bot.send_video(group_chat_id, message.video.file_id, caption=message.caption)
    elif message.content_type == 'audio':
        bot.send_audio(group_chat_id, message.audio.file_id, caption=message.caption)
    else:
        bot.send_message(message.chat.id, '–¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.')
    bot.send_message(message.chat.id, '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø—É.')

@bot.message_handler(commands=['weather'])
def weather(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ñ—Ç! üèô–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞üèô')

@bot.message_handler(content_types=['text'])
def get_weather(message):
    city = message.text.strip().lower()
    res = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={weather_api_key}&units=metric')
    data = json.loads(res.text)

    if res.status_code == 200:
        temp = data["main"]["temp"]
        weather_desc = data["weather"][0]["description"]
        feels_like = data["main"]["feels_like"]
        wind_speed = data["wind"]["speed"]
        humidity = data["main"]["humidity"]
        sunrise = datetime.fromtimestamp(data["sys"]["sunrise"]).strftime('%Y-%m-%d %H:%M:%S')
        sunset = datetime.fromtimestamp(data["sys"]["sunset"]).strftime('%Y-%m-%d %H:%M:%S')

        bot.reply_to(message,
                     f'–ü–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ: {city.title()}\n'
                     f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n'
                     f'–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: {feels_like}¬∞C\n'
                     f'–û–ø–∏—Å: {weather_desc}\n'
                     f'–í—ñ—Ç–µ—Ä: {wind_speed} –º/—Å\n'
                     f'–í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%\n'
                     f'–°—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunrise}\n'
                     f'–ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunset}')

        if temp < 0:
            additional_info = "–ù–∞ –≤—É–ª–∏—Ü—ñ –º–æ—Ä–æ–∑! ‚ùÑÔ∏è"
            image = 'snowy.jpeg'
        elif "rain" in weather_desc.lower():
            additional_info = "–ó–∞—Ä–∞–∑ –¥–æ—â. üåßÔ∏è"
            image = 'rainy.jpg'
        elif temp > 30:
            additional_info = "–î—É–∂–µ —Å–ø–µ–∫–æ—Ç–Ω–æ! üåû"
            image = 'sunshine.jpg'
        else:
            additional_info = "–ü–æ–≥–æ–¥–∞ –≥–∞—Ä–Ω–∞! üòä"
            image = 'oblachno.jpg'

        with open(image, 'rb') as file:
            bot.send_photo(message.chat.id, file)

    else:
        bot.reply_to(message, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É')

async def send_alerts_info(chat_id):
    active_alerts = await alerts_client.get_active_alerts()
    alerts = active_alerts.get_all_alerts()
    alerts_by_region = {region: [] for region in regions.values()}

    for alert in alerts:
        location_title = alert.location_title
        if location_title in alerts_by_region:
            alerts_by_region[location_title].append(alert)

    message = "üö® <b>–°—Ç–∞—Ç—É—Å —Ç—Ä–∏–≤–æ–≥ –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö:</b> üö®\n\n"
    for region, alerts in alerts_by_region.items():
        message += f"<b>{region}:</b> {'–Ñ —Ç—Ä–∏–≤–æ–≥–∞' if alerts else '–¢—Ä–∏–≤–æ–≥ –Ω–µ–º–∞—î'}\n"

    bot.send_message(chat_id, message, parse_mode='HTML')

@bot.message_handler()
def info(message):
    if message.text in ['–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ', '–°–ª–∞–≤–∞ –£–∫—Ä–∞–∏–Ω–µ']:
        bot.send_message(message.chat.id, f'–ì–µ—Ä–æ—è–º –°–ª–∞–≤–∞! {message.from_user.first_name} {message.from_user.last_name}')
    elif message.text in ['–°–ª–∞–≤–∞ –ù–∞—Ü—ñ—ó', '–°–ª–∞–≤–∞ –ù–∞—Ü–∏–∏']:
        bot.send_message(message.chat.id, '–°–º–µ—Ä—Ç—å –≤–æ—Ä–æ–≥–∞–º!')
    elif message.text in ['–ü—É—Ç–∏–Ω', '–ü—É—Ç—ñ–Ω']:
        bot.send_message(message.chat.id, '–•—É–π–ª–æ!')

bot.polling(none_stop=True)